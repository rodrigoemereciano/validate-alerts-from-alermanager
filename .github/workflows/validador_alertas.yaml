name: Validar Sintaxe do Arquivo de Alertas

on:
  push:
    branches:
    - '*'

env:
  PROMETHEUS_VERSION: '2.50.1'

jobs:
  syntax_check:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout do repositório
      uses: actions/checkout@v2

    - name: Configurar Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Instalar dependências
      run: pip install pyyaml regex

    - name: Instalar promtool
      run: |
        wget https://github.com/prometheus/prometheus/releases/latest/download/prometheus-${{ env.PROMETHEUS_VERSION }}.linux-amd64.tar.gz
        tar -xvf prometheus-${{ env.PROMETHEUS_VERSION }}.linux-amd64.tar.gz
        sudo cp prometheus-${{ env.PROMETHEUS_VERSION }}.linux-amd64/promtool /usr/local/bin/
        rm -fr prometheus-${{ env.PROMETHEUS_VERSION }}.linux-amd64

    # - name: promtool check
    #   uses: karancode/promtool-action@v0.0.1
    #   with:
    #     prom_version: '2.43.1'
    #     prom_check_subcommand: 'rules'
    #     prom_check_files: '**/*.y*ml'
    #     prom_comment: true

    - name: Validar sintaxe do arquivo de alertas com o promtool
      run: |
        for dir in *-dev *-hom *-pro; do
          if [[ -d $dir ]]; then
            find "$dir" -type f \( -name "*.yaml" -o -name "*.yml" \) -exec promtool check rules {} +
          fi
        done

    - name: Executar validação de sintaxe com Python
      run: python .github/workflows/validate_alerts.py

    - name: Instala dependências
      run: python -m pip install --upgrade pip

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # Garante o fetch de todo o histórico

    - name: Verificar 'email_router' no código modificado
      run: |
        # Verifica se há pelo menos um commit anterior
        if git rev-parse HEAD~1 > /dev/null 2>&1; then
          MODIFIED_FILES=$(git diff --name-only HEAD~1 HEAD)
        else
          echo "Apenas um commit no branch; checando todos os arquivos."
          MODIFIED_FILES=$(git ls-files)
        fi
        echo "Arquivos modificados ou existentes: $MODIFIED_FILES"

        # Loop pelos arquivos para buscar o termo 'email_router'
        FOUND=false
        for file in $MODIFIED_FILES; do
          if grep -q 'email_router' "$file"; then
            echo "::error ::Termo 'email_router' encontrado em $file"
            FOUND=true
          fi
        done

        if [ "$FOUND" = true ]; then
          exit 1
        else
          echo "Nenhum termo 'email_router' encontrado nos arquivos modificados ou existentes."
